stages:
  - test
  - build
  - release
  - deploy

include:
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  SAST_EXCLUDED_ANALYZERS: "nodejs-scan"

sonarqube-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd backend
    - >
      sonar-scanner
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey="${SONAR_PROJECT_KEY_BACK}"
      -Dsonar.host.url="${SONARQUBE_URL}"
      -Dsonar.login="${SONAR_LOGIN_BACK}"
  allow_failure: true

unittest:
  stage: test
  image: golang:alpine
  before_script:
    - apk add build-base
  script:
    - cd backend
    - go test -v ./...

build-backend-docker-image:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/momo-backend:${CI_COMMIT_SHA}"
      --build-arg VERSION=${VERSION}
      --cache=true

release-backend-docker-image:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  cache: []
  stage: release
  before_script:
    - crane auth login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - crane tag ${CI_REGISTRY_IMAGE}/momo-backend:${CI_COMMIT_SHA} latest

deploy-backend-test:
  stage: deploy
  image: docker:24.0.7-alpine3.19
  environment:
    name: backend/${CI_COMMIT_REF_SLUG}
    on_stop: delete-backend-test
  before_script:
    - apk add docker-cli-compose openssh-client
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - docker context create remote-host --description "remote ssh" --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
  script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker-compose --context remote-host up --detach --force-recreate --pull "always"  backend

delete-backend-test:
  stage: deploy
  image: docker:24.0.7-alpine3.19
  when: manual
  environment:
    name: backend/${CI_COMMIT_REF_SLUG}
    action: stop
  extends: .ssh_auth
  before_script:
    - apk add docker-cli-compose openssh-client bash
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - docker context create remote --description "remote ssh" --docker "host=ssh://${DEV_USER}@${DEV_HOST}" 
  script:
    - docker --context remote compose down backend --rmi all